/*
Deployment script for ACADB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ACADB"
:setvar DefaultFilePrefix "ACADB"
:setvar DefaultDataPath "E:\SQLServer\MSSQL15.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "E:\SQLServer\MSSQL15.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[BaseProducts]...';


GO
CREATE TABLE [dbo].[BaseProducts] (
    [Id]          INT           IDENTITY (1, 1) NOT NULL,
    [Picture]     VARCHAR (100) NULL,
    [Description] VARCHAR (500) NULL,
    [Quantity]    INT           NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[ComponentEndProduct]...';


GO
CREATE TABLE [dbo].[ComponentEndProduct] (
    [Id]                  INT IDENTITY (1, 1) NOT NULL,
    [BaseProductId]       INT NULL,
    [EndProductId]        INT NULL,
    [QuantityBaseProduct] INT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[ContractManufacturing]...';


GO
CREATE TABLE [dbo].[ContractManufacturing] (
    [Id]               INT   IDENTITY (1, 1) NOT NULL,
    [Date]             DATE  NULL,
    [ManufacturingId]  INT   NULL,
    [SubcontractorId]  INT   NULL,
    [SubcontractorCut] MONEY NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Customers]...';


GO
CREATE TABLE [dbo].[Customers] (
    [Id]           INT           IDENTITY (1, 1) NOT NULL,
    [Name]         VARCHAR (50)  NOT NULL,
    [FirstName]    VARCHAR (20)  NULL,
    [Email]        VARCHAR (30)  NOT NULL,
    [Address]      VARCHAR (30)  NULL,
    [BusinessName] VARCHAR (100) NULL,
    [PhoneNumber]  VARCHAR (20)  NULL,
    [UserId]       INT           NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[EndProducts]...';


GO
CREATE TABLE [dbo].[EndProducts] (
    [Id]          INT           IDENTITY (1, 1) NOT NULL,
    [Description] VARCHAR (150) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Manufacturing]...';


GO
CREATE TABLE [dbo].[Manufacturing] (
    [Id]          INT          IDENTITY (1, 1) NOT NULL,
    [DateStart]   DATE         NULL,
    [DeadLine]    DATE         NULL,
    [Total]       MONEY        NULL,
    [DownPayment] MONEY        NULL,
    [CustomerId]  INT          NOT NULL,
    [Status]      VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[ManufacturingEndProduct]...';


GO
CREATE TABLE [dbo].[ManufacturingEndProduct] (
    [Id]              INT IDENTITY (1, 1) NOT NULL,
    [ManufacturingId] INT NULL,
    [EndProductId]    INT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[OrderBaseProduct]...';


GO
CREATE TABLE [dbo].[OrderBaseProduct] (
    [Id]            INT IDENTITY (1, 1) NOT NULL,
    [BaseProductId] INT NOT NULL,
    [OrderId]       INT NOT NULL,
    [Quantity]      INT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Orders]...';


GO
CREATE TABLE [dbo].[Orders] (
    [Id]         INT   IDENTITY (1, 1) NOT NULL,
    [Date]       DATE  NOT NULL,
    [CustomerId] INT   NOT NULL,
    [Total]      MONEY NULL,
    [IsPaid]     BIT   NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Subcontractors]...';


GO
CREATE TABLE [dbo].[Subcontractors] (
    [Id]        INT          IDENTITY (1, 1) NOT NULL,
    [Name]      VARCHAR (50) NOT NULL,
    [FirstName] VARCHAR (20) NULL,
    [Email]     VARCHAR (30) NOT NULL,
    [Address]   VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [Id]       INT            IDENTITY (1, 1) NOT NULL,
    [IsAdmin]  BIT            NULL,
    [Password] VARBINARY (64) NOT NULL,
    [Email]    VARCHAR (40)   NULL,
    [Salt]     VARCHAR (100)  NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 0 FOR [IsAdmin];


GO
PRINT N'Creating Foreign Key [dbo].[FK_ComponentEndProduct_ToBaseProduct]...';


GO
ALTER TABLE [dbo].[ComponentEndProduct]
    ADD CONSTRAINT [FK_ComponentEndProduct_ToBaseProduct] FOREIGN KEY ([BaseProductId]) REFERENCES [dbo].[BaseProducts] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ComponentEndProduct_ToEndProduct]...';


GO
ALTER TABLE [dbo].[ComponentEndProduct]
    ADD CONSTRAINT [FK_ComponentEndProduct_ToEndProduct] FOREIGN KEY ([EndProductId]) REFERENCES [dbo].[EndProducts] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ContractManufacturing_ToManufacturing]...';


GO
ALTER TABLE [dbo].[ContractManufacturing]
    ADD CONSTRAINT [FK_ContractManufacturing_ToManufacturing] FOREIGN KEY ([ManufacturingId]) REFERENCES [dbo].[Manufacturing] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ContractManufacturing_ToSubcontractor]...';


GO
ALTER TABLE [dbo].[ContractManufacturing]
    ADD CONSTRAINT [FK_ContractManufacturing_ToSubcontractor] FOREIGN KEY ([SubcontractorId]) REFERENCES [dbo].[Subcontractors] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Customers_ToUser]...';


GO
ALTER TABLE [dbo].[Customers]
    ADD CONSTRAINT [FK_Customers_ToUser] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ManufacturingEndProduct_ToManufacturing]...';


GO
ALTER TABLE [dbo].[ManufacturingEndProduct]
    ADD CONSTRAINT [FK_ManufacturingEndProduct_ToManufacturing] FOREIGN KEY ([ManufacturingId]) REFERENCES [dbo].[Manufacturing] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ManufacturingEndProduct_ToEndProduct]...';


GO
ALTER TABLE [dbo].[ManufacturingEndProduct]
    ADD CONSTRAINT [FK_ManufacturingEndProduct_ToEndProduct] FOREIGN KEY ([EndProductId]) REFERENCES [dbo].[EndProducts] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CommandProduct_ToCommand]...';


GO
ALTER TABLE [dbo].[OrderBaseProduct]
    ADD CONSTRAINT [FK_CommandProduct_ToCommand] FOREIGN KEY ([OrderId]) REFERENCES [dbo].[Orders] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CommandProduct_ToProduct]...';


GO
ALTER TABLE [dbo].[OrderBaseProduct]
    ADD CONSTRAINT [FK_CommandProduct_ToProduct] FOREIGN KEY ([BaseProductId]) REFERENCES [dbo].[BaseProducts] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Command_Customer]...';


GO
ALTER TABLE [dbo].[Orders]
    ADD CONSTRAINT [FK_Command_Customer] FOREIGN KEY ([CustomerId]) REFERENCES [dbo].[Customers] ([Id]);


GO
PRINT N'Creating Function [dbo].[GetSecretKey]...';


GO
CREATE function [dbo].[GetSecretKey]
()
	returns varchar
AS
	begin
		declare @secret varchar(100);
		set @secret = 'azhehzarhahrazh het azetazr tdaj"é"ezroiuéuezihoZIUH 9E9H0832OIZEHFIH ZOIDJPSOZOEHFZIHJHzopfejzpojzjgispoifizidfjzdfozkfezlrkzoerfzledsoflzdfdmtzrjtdfjzefoihzetujudnsjknrejrttoicommentckoazafafjzjzehityzééézdeejbazebbeaurayzryaeyeux'
		RETURN @secret
	end
GO
PRINT N'Creating Procedure [dbo].[InsertBaseProduct]...';


GO
CREATE PROCEDURE [dbo].[InsertBaseProduct]
	@picture varchar(200),
	@description varchar(200),
	@quantity int
AS
	insert into BaseProducts (Picture,Description,Quantity) values(@picture,@description,@quantity)
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[InsertOrder]...';


GO
CREATE PROCEDURE [dbo].[InsertOrder]
	@date date,
	@customerId int,
	@total money,
	@isPaid bit
AS
	insert into Orders (Date,CustomerId,Total,IsPaid) values (@date,@customerId,@total,@isPaid)
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[InsertUser]...';


GO
CREATE PROCEDURE [dbo].[InsertUser]
	@email varchar(20),
	@password varchar(30)
	
	
AS
	BEGIN
		
		declare @salt varchar(100)
		set @salt = concat(newid(),newid(),newid())
		declare @secret varchar(100) = dbo.GetSecretKey()
		declare @hashpassword varbinary(64)
		set @hashpassword = HASHBYTES('SHA2_512',CONCAT(@salt,@password,@secret,@salt))
		insert into [Users] (Email,Password,Salt) values (@email,@hashpassword,@salt)
	END
RETURN 0
GO
PRINT N'Creating Procedure [dbo].[UpdateBaseProduct]...';


GO
CREATE PROCEDURE [dbo].[UpdateBaseProduct]
	@picture varchar(200) = 0,
	@description varchar(300),
	@quantity int
AS
	update BaseProducts set Picture = @picture, Description = @description, Quantity = @quantity
RETURN 0
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd012d042-4f27-4737-958e-2d8cfe9fc8d5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d012d042-4f27-4737-958e-2d8cfe9fc8d5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '343162af-c09b-408c-b601-99b351a112a6')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('343162af-c09b-408c-b601-99b351a112a6')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '218b572d-e9a5-4510-870b-75f066ff1a52')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('218b572d-e9a5-4510-870b-75f066ff1a52')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7824c2aa-1259-46d5-904e-5f08204b43f5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7824c2aa-1259-46d5-904e-5f08204b43f5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '96af854e-65aa-4888-81b7-e089ed4402b2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('96af854e-65aa-4888-81b7-e089ed4402b2')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
